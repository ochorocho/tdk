#!/usr/bin/env bash

TASK=$1
COMMAND=$2
OPTION=$3

TYPO3_CLI_PATH=/workspace/tdk/vendor/bin/typo3
DBNAME="db"

cronTask () {
    if [ -f "$TYPO3_CLI_PATH" ] ; then
      /usr/bin/php $TYPO3_CLI_PATH scheduler:run
      echo -e "$(date) - TYPO3 scheduler - done"
    else
      echo -e "$(date) - CLI command $TYPO3_CLI_PATH not found, please run 'composer tdk:setup'"
    fi
}

previewTask () {
    case $COMMAND in
        fe)
            gp preview "$(gp url 8001)" --external
            exit 0
            ;;
        be)
            gp preview "$(gp url 8001)/typo3" --external
            exit 0
            ;;
        install)
            touch "$GITPOD_REPO_ROOTS/public/typo3conf/ENABLE_INSTALL_TOOL" && gp preview "$(gp url 8001)/typo3/install.php" --external
            exit 0
            ;;
        mailhog)
            gp preview "$(gp url 8025)" --external
            exit 0
            ;;
        *)
            echo "Unknown preview command. Choose one of the following:"
            echo "fe, be, install, mailhog"
            exit 1
            ;;
    esac
}

databaseTask () {
    case $COMMAND in
    create)
        if [ -d /workspace/mysql/$DBNAME ] ; then
            echo -e "Database '${DBNAME}' already exists"
        else
            echo -e "Created database:\n User: ${DBNAME}\n Password: ${DBNAME}\n Host: localhost\n Name: ${DBNAME}"
            sudo mysql -e "CREATE DATABASE ${DBNAME} CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci;"
            sudo mysql -e "CREATE USER '${DBNAME}'@'localhost' IDENTIFIED WITH mysql_native_password  BY '${DBNAME}';" > /dev/null 2>&1
            sudo mysql -e "GRANT ALL PRIVILEGES ON * . * TO '${DBNAME}'@'localhost';"
        fi
        exit 0
        ;;
    delete)
        if [ -d /workspace/mysql/db ] ; then
            sudo mysql -e "DROP DATABASE ${DBNAME};"
            echo -e "Database '${DBNAME}' deleted"
        else
            echo -e "Database '${DBNAME}' does not exist"
        fi

        exit 0
        ;;
    *)
        echo "Argument unknown. Choose one of the following:"
        echo "create, delete"
        exit 1
        ;;
    esac
}

phpTask () {
    PHP=${COMMAND:=8.1}
    version=$(ls /etc/php)

    if [[ ${version[*]} =~ $PHP ]]
    then
        echo "Switch to version $PHP."
    else
        echo "PHP version $PHP not available, use 'tdk php <version>'"
        echo "These versions are available:"
        echo "${version}"
        exit 1
    fi

    # Set CLI version
    sudo update-alternatives --set php "$(which php${PHP})"
    ALL_VERSIONS=$(ls /etc/php)

    # Disable modules that might have been enabled, but conflicting
    for version in $ALL_VERSIONS
    do
        echo "Disable modules for PHP $version ..."
        sudo a2dismod mpm_prefork mpm_event mpm_worker > /dev/null 2>&1
        sudo a2dismod "php$version" > /dev/null 2>&1
    done

    sudo a2enmod "php$PHP" > /dev/null 2>&1

    if [[ $OPTION = '--no-reload' ]]
    then
        echo "Apache was not reloaded due to $OPTION option. Please reload manually using 'service apache2 restart'"
    else
        sudo service apache2 restart
    fi
}

addSshKeyFromEnvironmentVariable() {
    if [[ -z "${SSH_PRIVATE_KEY}" ]]; then
        echo -e "Evironment variable 'SSH_PRIVATE_KEY' not set!\nFor details see https://gitpod.io/variables "
        exit 0
    fi

    regex='(-----BEGIN OPENSSH PRIVATE KEY----- )((.|\n)*?)(-----END OPENSSH PRIVATE KEY-----)'
    privateKeyPath=~/.ssh/id_rsa

    if [[ "${SSH_PRIVATE_KEY}" =~ $regex ]] ; then
        key=$(echo "${BASH_REMATCH[2]}" | tr " " "\n")
        echo -e "${BASH_REMATCH[1]}\n$key\n${BASH_REMATCH[4]}" | awk '{$1=$1};1' > ~/.ssh/id_rsa
        chmod 600 $privateKeyPath
    fi

    if ssh-keygen -y -e -f ~/.ssh/id_rsa > /dev/null 2>&1; then
        echo "Stored ssh key in $privateKeyPath"
    else
        echo "Private key $privateKeyPath is not valid!"
        exit 1
    fi
}

case $TASK in
  cron)
    cronTask
    exit 0
    ;;
  preview)
    previewTask
    exit 0
    ;;
  db)
    databaseTask
    exit 0
    ;;
  php)
    phpTask
    exit 0
    ;;
  ssh-add)
    addSshKeyFromEnvironmentVariable
    exit 0
    ;;
  *)
    echo "Argument unknown. Choose one of the following:"
    echo "cron, preview, db, php, ssh-add"
    exit 1
    ;;
esac
